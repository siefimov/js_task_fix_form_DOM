{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,EAAS,SAAS,gBAAgB,CAAC,UACnC,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAa,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAEvC,EAAW,EAAO,GAAG,CAAC,SAAC,CAA7B,EAAyC,OAAA,EAAQ,EAAE,A,GAEnD,SAAS,EAAgB,CAAS,EAGhC,IAAM,EAAW,AAFK,EAAU,KAAK,CAAC,aAEP,IAAI,CAAC,KAAK,WAAW,GAIpD,OAFE,EAAS,MAAM,CAAC,GAAG,WAAW,GAAK,EAAS,KAAK,CAAC,EAGtD,CAEA,EAAO,OAAO,CAAC,SAAC,CAAA,CAAc,CAA9B,EACE,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAe,CAAM,CAAC,EAAM,AAElC,CAAA,EAAM,SAAS,CAAG,cAClB,EAAM,YAAY,CAAC,MAAO,CAAQ,CAAC,EAAM,EACzC,EAAM,WAAW,CAAG,EAAgB,EAAa,IAAI,EAErD,EAAa,qBAAqB,CAAC,aAAc,EACnD,GAEA,EAAO,OAAO,CAAC,SAAC,CAAhB,EACE,IAAM,EAAmB,EAAgB,EAAQ,IAAI,EAErD,EAAQ,YAAY,CAAC,cAAe,EACtC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar fields = document.querySelectorAll(\".field\");\nvar inputs = _to_consumable_array(document.querySelectorAll(\".field-text\"));\nvar inputIds = inputs.map(function(element) {\n    return element.id;\n});\nfunction formatInputName(inputName) {\n    var formattedName = inputName.split(/(?=[A-Z])/);\n    var sentence = formattedName.join(\" \").toLowerCase();\n    var capitalizedSentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n    return capitalizedSentence;\n}\nfields.forEach(function(fieldElement, index) {\n    var label = document.createElement(\"label\");\n    var inputElement = inputs[index];\n    label.className = \"field-label\";\n    label.setAttribute(\"for\", inputIds[index]);\n    label.textContent = formatInputName(inputElement.name);\n    fieldElement.insertAdjacentElement(\"afterbegin\", label);\n});\ninputs.forEach(function(element) {\n    var placeholderValue = formatInputName(element.name);\n    element.setAttribute(\"placeholder\", placeholderValue);\n});\n\n//# sourceMappingURL=index.1bf18c99.js.map\n","'use strict';\n\nconst fields = document.querySelectorAll('.field');\nconst inputs = [...document.querySelectorAll('.field-text')];\n\nconst inputIds = inputs.map((element) => element.id);\n\nfunction formatInputName(inputName) {\n  const formattedName = inputName.split(/(?=[A-Z])/);\n\n  const sentence = formattedName.join(' ').toLowerCase();\n  const capitalizedSentence =\n    sentence.charAt(0).toUpperCase() + sentence.slice(1);\n\n  return capitalizedSentence;\n}\n\nfields.forEach((fieldElement, index) => {\n  const label = document.createElement('label');\n  const inputElement = inputs[index];\n\n  label.className = 'field-label';\n  label.setAttribute('for', inputIds[index]);\n  label.textContent = formatInputName(inputElement.name);\n\n  fieldElement.insertAdjacentElement('afterbegin', label);\n});\n\ninputs.forEach((element) => {\n  const placeholderValue = formatInputName(element.name);\n\n  element.setAttribute('placeholder', placeholderValue);\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","fields","document","querySelectorAll","inputs","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","inputIds","map","element","id","formatInputName","inputName","sentence","formattedName","split","join","toLowerCase","charAt","toUpperCase","forEach","fieldElement","index","label","createElement","inputElement","className","setAttribute","textContent","insertAdjacentElement","placeholderValue"],"version":3,"file":"index.1bf18c99.js.map"}